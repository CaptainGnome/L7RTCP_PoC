# l7rtcp_poc/app/utils.py
"""Вспомогательные функции для L7RTCP PoC."""

import time
import secrets

def generate_uuid7() -> str:
    """
    Генерирует UUID версии 7 в виде строки без дефисов.
    
    UUIDv7 содержит 48-битную временную метку (в миллисекундах) и 74 случайных бита.
    Для простоты PoC реализуем упрощенную версию:
    - Первые 12 символов: timestamp в миллисекундах в hex (48 бит = 12 hex символов)
    - Следующие 20 символов: случайные данные (80 бит, но урежем до 74 для простоты)
    
    В реальной реализации следует строго следовать RFC 9562.
    """
    # Получаем timestamp в миллисекундах
    timestamp_ms = int(time.time() * 1000)
    
    # Преобразуем в hex и убедимся, что длина 12 символов
    timestamp_hex = format(timestamp_ms, 'x').zfill(12)[-12:] # Берем последние 12 символов на случай переполнения
    
    # Генерируем 74 бита случайных данных (примерно 19 hex символов, но округлим до 20)
    # secrets.randbits(k) генерирует число с k случайными битами
    random_part = format(secrets.randbits(74), 'x').zfill(20)[-20:] # Берем последние 20 символов
    
    # Комбинируем и возвращаем как строку без дефисов, добавив префикс для уникальности в PoC
    return f"tx-{timestamp_hex}{random_part}"[:32] # Обрежем до 32 символов для краткости и уникальности

# Примечание: В production следует использовать полноценную библиотеку для UUIDv7.